[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Application",
  "enabled": 1,
  "modified": "2023-04-10 19:46:47.837750",
  "module": null,
  "name": "Leave Application",
  "script": "frappe.ui.form.on('Leave Application', {\n//     company(frm) {\n// \t\tif (frm.doc.company) {\n// \t\t\tfrm.trigger(\"set_series\");\n// \t\t}\n// \t\tif (frm.doc.company == \"MARAZEEM SECURITY SERVICES\" || frm.doc.company == \"MARAZEEM SECURITY SERVICES - SHOWROOM\" || frm.doc.company == \"MARAZEEM SECURITY SERVICES - HO\") {\n// \t\t\tfrm.set_value('letter_head', \"MARAZEEM SECURITY SERVICES\");\n// \t\t}\n// \t\tif (frm.doc.company == \"KINGFISHER TRADING AND CONTRACTING COMPANY\" || frm.doc.company == \"KINGFISHER - TRANSPORTATION\" || frm.doc.company == \"KINGFISHER - SHOWROOM\") {\n// \t\t\tfrm.set_value('letter_head', \"KINGFISHER TRADING AND CONTRACTING COMPANY\");\n// \t\t}\n// \t\tif (frm.doc.company == \"Al - Shaghairi Trading and Contracting Company W.L.L (ELECTRA)\" || frm.doc.company == \"ELECTRA - BARWA SHOWROOM\"|| frm.doc.company == \"ELECTRA - ALKHOR SHOWROOM\" || frm.doc.company == \"ELECTRA - BINOMRAN SHOWROOM\" || frm.doc.company == \"ELECTRA  - NAJMA SHOWROOM\" || frm.doc.company == \"ELECTRICAL DIVISION - ELECTRA\" || frm.doc.company == \"MEP DIVISION - ELECTRA\" || frm.doc.company == \"STEEL DIVISION - ELECTRA\" || frm.doc.company == \"TRADING DIVISION - ELECTRA\" || frm.doc.company == \"INTERIOR DIVISION - ELECTRA\" || frm.doc.company == \"ENGINEERING DIVISION - ELECTRA\" || frm.doc.company == \"INDUSTRIAL TOOLS DIVISION\") {\n// \t\t\tfrm.set_value('letter_head', \"Electra\");\n// \t\t}\n// \t},\n    refresh(frm){\n        // if(!frm.doc.__islocal){\n        // frm.add_custom_button(__(\"Print\"), function () {\n        // if(frm.doc.parent_company){\n        //     var letter_head = frm.doc.parent_company;\n        // }\n        // else{\n        //     var letter_head = frm.doc.company\n        // } \n        //     var f_name = frm.doc.name;\n        //     var print_format =\"Leave Application\";\n        //     window.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n        //         + \"doctype=\" + encodeURIComponent(\"Leave Application\")\n        //         + \"&name=\" + encodeURIComponent(f_name)\n        //         + \"&trigger_print=1\"\n        //         + \"&format=\" + print_format\n        //         + \"&no_letterhead=0\"\n        //         + \"&letterhead=\" + encodeURIComponent(letter_head) \n        //       ));\n        // });\n        // }\n        frm.add_custom_button(__('Rejoining Form'),function(){\n\t        frappe.db.get_value('Rejoining Form', { 'emp_no': frm.doc.employee }, 'name')\n\t\t\t.then(r => {\n\t\t\t\tif (r.message && Object.entries(r.message).length === 0) {\n\t\t\t\t\tfrappe.route_options = { 'emp_no': frm.doc.employee, 'leave_application': frm.doc.name };\n\t\t\t\t\tfrappe.set_route('Form', 'Rejoining Form', 'new');\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfrappe.set_route('Form', 'Rejoining Form', r.message.name);\n\t\t\t\t}\n\t\t\t});\n\t    });\n\t    frm.add_custom_button(__('Leave Salary'), function () {\n\t\t\tfrappe.db.get_value('Leave Salary', { 'employee': frm.doc.employee }, 'name')\n\t\t\t\t.then(r => {\n\t\t\t\t\tif (r.message && Object.entries(r.message).length === 0) {\n\t\t\t\t\t\tconsole.log('hello');\n\t\t\t\t\t\tfrappe.route_options = { 'employee': frm.doc.employee, 'employee_name': frm.doc.employee_name };\n\t\t\t\t\t\tfrappe.set_route('Form', 'Leave Salary', 'new-leave-salary-1');\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tfrappe.set_route('Form', 'Leave Salary', r.message.name);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n    //     frm.trigger('get_leave_details');\n    //     frm.add_custom_button(__(\"Exit Checklist\"), function () {\n    //         frappe.route_options = {\n\t\t\t\t// \t\"employee\": frm.doc.employee,\n\t\t\t\t// };\n    //         frappe.set_route('Form','Exit Checklist','new-exit-check-list-1');\n    // },\n    // );\n    },\n//     validate(frm){\n//         frm.trigger('role_permission');\n//     },\n//     from(frm){\n//         frm.trigger('from_date_validation');\n//     },\n    \n//     to(frm){\n//         frm.trigger('to_date_validation');\n//     },\n// \tget_leave_details(frm) {\n// \t   if(!frm.doc.__islocal){\n// \t    frappe.call({\n// \t        method :\"electra.custom.get_leave_details\",\n// \t        args:{\n// \t            name : frm.doc.name,\n// \t            from_date : frm.doc.from_date,\n// \t            to_date : frm.doc.to_date,\n// \t            leave : frm.doc.total_leave_days,\n// \t            lea_ty : frm.doc.leave_type\n// \t        },\n// \t        callback(r){\n// \t           // console.log(r.message);\n// \t        frm.fields_dict.leave_details1.$wrapper.empty().append(\"<h5><b>Leave Details</b><h5><table class='table table-bordered'>\"+r.message+\"</table>\");      \n// \t        }\n// \t    });\n//     }\n// \t},\n// \tfrom_date_validation:function(frm){\n//     if(frm.doc.to < frm.doc.from){\n//         frappe.msgprint(__(\"FROM date cannot be greater than TO Date\"));\n// \t\tfrappe.validated = false;\n//         }\n// \t},\n// \tto_date_validation:function(frm){\n//     if(frm.doc.to < frm.doc.from){\n//         frappe.msgprint(__(\"TO date cannot be lesser than FROM Date\"));\n// \t\tfrappe.validated = false;\n//     }\n// \t},\n// \trole_permission:function(frm){\n// \t    console.log(frappe.user.has_role('HOD'));\n// \t    if(frappe.user.has_role(\"HOD\")){\n// \t        frm.set_value(\"hod\",true);\n\t        \n// \t    }\n// \t    if(!frappe.user.has_role(\"HOD\")){\n// \t        frm.set_value(\"hod\",false);\n// \t    }\n// \t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Rejoining Form",
  "enabled": 1,
  "modified": "2023-04-10 16:48:56.915110",
  "module": null,
  "name": "Rejoining Form",
  "script": "frappe.ui.form.on('Rejoining Form', {\n    validate(frm){\n        frm.trigger(\"late_joining_in_days\");\n    },\n    // onload(frm){\n    //     frm.trigger('emp_no')\n    // },\n    // emp_no(frm){\n    //     frappe.db.get_value('Employee',frm.doc.emp_no,'user_id')\n    //     .then(r => { \n    //         frappe.call({\n    //             method:\"electra.utils.get_user_role\",\n    //             args:{\n    //                 'user':r.message.user_id\n    //             },\n    //             callback(r){\n    //                 if(r){\n    //                     $.each(r.message,function(i,d){\n    //                         if(d == \"HOD\"){\n    //                             frm.set_value('hod',1)\n    //                         }\n                            \n    //                     })\n    //                 }\n    //             }\n    //         })\n    //     })\n    // },\n    // refresh(frm){\n        \n    //     if (frm.doc.status == \"Completed\"){\n    //         frm.add_custom_button(__(\"Update Leave Salary\") ,function () {\n    //             frappe.call({\n    //                 method:  'electra.electra.doctype.rejoining_form.rejoining_form.rejoining_date',\n    //                 args: {\n    // \t\t\t        employee: frm.doc.emp_no,\n    // \t\t\t        rejoin: frm.doc.re_join\n    // \t\t},\n    //         callback: function (r) {\n    // \t\t\tif (r) {\n    // \t\t\t    console.log(r.message);\n    // \t\t\t}\n    //     }\n    // })  \n    //             // console.log(\"HI\");\n                \n    //         });\n    //     }\n    //     frm.add_custom_button(__(\"Print\"), function () {\n    //         if(frm.doc.parent_company){\n    //             var letter_head = frm.doc.parent_company;\n    //         }\n    //         else{\n    //             var letter_head = frm.doc.company\n    //         } \n    //         var f_name = frm.doc.name;\n    //         var print_format =\"Rejoining Form\";\n    //          window.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n    //             + \"doctype=\" + encodeURIComponent(\"Rejoining Form\")\n    //             + \"&name=\" + encodeURIComponent(f_name)\n    //             + \"&trigger_print=1\"\n    //             + \"&format=\" + print_format\n    //             + \"&no_letterhead=0\"\n    //             + \"&letterhead=\" + encodeURIComponent(letter_head)\n    //         ));\n    //     });\n    // },\n    end(frm){ \n\t    frm.trigger(\"total_leave_in_days\");\n\t},\n\tstart(frm){\n\t    frm.trigger(\"date_validation\");\n    },\n    end(frm){\n        frm.trigger(\"date_validate\");\n    },\n    re_join(frm){\n\t    frm.trigger(\"rejoin_validation\");\n\t   // frm.set_value('re_joining_date',frm.doc.re_join);\n\t},\n\treporting_date(frm){\n\t   if(frm.doc.reporting_date < frm.doc.re_join){\n\t        frappe.msgprint(__(\"Reporting date cannot be before than Re-Join Date\"));\n\t\t\tfrappe.validated = false;\n\t    }\n        frm.trigger(\"late_joining_in_days\");\n\t},\n    date_validate:function(frm){\n    if(frm.doc.end < frm.doc.start){\n        frappe.msgprint(__(\"End date cannot be before than Start Date\"));\n\t\tfrappe.validated = false;\n    }\n\t},\n\tdate_validation:function(frm){\n\t    if(frm.doc.end < frm.doc.start){\n\t        frappe.msgprint(__(\"Start date cannot be after than End Date\"));\n\t\t\tfrappe.validated = false;\n\t    }\n\t},\n\trejoin_validation:function(frm){\n\t    if(frm.doc.re_join < frm.doc.end){\n        frappe.msgprint(__(\"Rejoining date cannot be before than End Date\"));\n\t\tfrappe.validated = false;\n    }\n\t},\n    total_leave_in_days:function(frm){\n        if(frm.doc.start && frm.doc.end){\n            var end = frappe.datetime.obj_to_str(frm.doc.end);\n            var start = frappe.datetime.obj_to_str(frm.doc.start);\n            var datediff = frappe.datetime.get_day_diff(end,start);\n            frm.set_value(\"total_leave_in_days\",datediff+1);\n        }\n    },\n    late_joining_in_days:function(frm){\n    if(frm.doc.reporting_date && frm.doc.re_join){      \n        var rejoin = frappe.datetime.obj_to_str(frm.doc.re_join);\n        var reporting_date = frappe.datetime.obj_to_str(frm.doc.reporting_date);\n        var difference = frappe.datetime.get_day_diff(reporting_date,rejoin);\n        if(difference >=0){\n            frm.set_value(\"late_joining_in_days\",difference);\n        }\n        else{\n            frm.set_value(\"late_joining_in_days\",0);\n        }\n    }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Salary",
  "enabled": 1,
  "modified": "2023-04-11 13:42:50.986988",
  "module": "HRPRO MENA",
  "name": "Leave Salary",
  "script": "frappe.ui.form.on('Leave Salary', {\n    validate(frm){\n        console.log(\"Hi\");\n        if(frm.doc.leaves_encashed > frm.doc.leave_balance){\n            frappe.validated = false;\n            frappe.msgprint(\"Leaves Encashed Days Greater then Leave Balance Days\");\n        }\n    //     // Multi-month\n    //     // Basic\n    //     var a = (frm.doc.basic / 30);\n    //     var b = (frm.doc.basic / 31);\n    //     var x = frm.doc.no_of_days_worked - 31;\n    //     // Future Payroll\n    //     var y = x * b;\n    //     var p = 31;\n    //     var q = (p - frm.doc.absent_days) * a;\n    //     // Past Payroll\n    //     //var y = (x - frm.doc.absent_days) * b\n    //     //var p = 31\n    //     //var q = p  * a\n    //     var z = q + y;\n    //     // Food Allowance\n    //     var af = 300 / 30;\n    //     var bf = 300 / 31;\n    //     var xf = frm.doc.no_of_days_worked - 31;\n    //     // Future Payroll\n    //     var yf = xf * bf;\n    //     var pf = 31;\n    //     var qf = (pf - frm.doc.absent_days) * af;\n    //     // Past Payroll\n    //     // var yf = (xf - frm.doc.absent_days) * bf\n    //     // var pf = 31\n    //     // var qf = pf * af\n    //     var zf = qf + yf;\n\t   // frm.set_value('salary_amount_pay',z.toFixed(2));\n    //     frm.set_value('food_allowance',zf.toFixed(2));\n\t   //// Single Month\n    // //     var basic = frm.doc.basic \n    // //     var dow = frm.doc.total_working_days \n    // //     var salary_amount_pay = ((basic/dow)*(frm.doc.no_of_days_worked-frm.doc.absent_days))\n    // //     var food_allowance = ((frm.doc.food/dow)*(frm.doc.no_of_days_worked-frm.doc.absent_days))\n    // //     ======\n    // //     frm.set_value('salary_amount_pay',salary_amount_pay.toFixed(2))\n    // //     frm.set_value('food_allowance',food_allowance.toFixed(2))\n    // //   ======\n      console.log(\"Hi\");\n      frm.trigger(\"cals\");\n      frm.trigger(\"earned_total\");\n      frm.trigger(\"total_salary\");\n      frm.trigger(\"total_leave_salary\");\n    },\n\tcals(frm){\n\t    console.log(\"Hi\");\n        var nodw = frm.doc.no_of_days_worked;\n        var bas = frm.doc.basic;\n        var ebasic = (bas/30)* ((nodw) - frm.doc.absent_days);\n        var fd_al = frm.doc.food;\n        var fd = (fd_al/30)*((nodw) - frm.doc.absent_days);\n        var me_al = frm.doc.mobile_allowance;\n        var eme = (me_al/30)*((nodw) - frm.doc.absent_days);\n        var hra = frm.doc.hra_salary;\n        var ehra = (hra/30)*((nodw) - frm.doc.absent_days);\n        var ota = frm.doc.other_allowance;\n        var eota = (ota/30)*((nodw) - frm.doc.absent_days);\n        var ta = frm.doc.transport_allowance;\n        var eta = (ta/30)*((nodw) - frm.doc.absent_days);\n        frm.set_value('earned_transport_allowance',eta);\n        frm.set_value('earned_other_allowance',eota);\n        frm.set_value('earned_hra',ehra);\n        frm.set_value('earned_mobile_allowance',eme);\n        frm.set_value('food_allowance',fd);\n        frm.set_value('salary_amount_pay',ebasic);\n\t},\n\tot_hours(frm){\n\t    console.log(\"Hi\");\n\t    if(frm.doc.employee){\n\t        console.log(\"Hi\");\n\t        var basic = frm.doc.basic;\n\t        var cal = (((basic/30)/8)*1.25) * frm.doc.ot_hours;\n\t        console.log(\"Hi\");\n\t        if(cal){\n\t            console.log(\"Hi\");\n\t            frm.set_value('ot_amount',cal.toFixed(2));\n\t        }\n\t        else{\n\t            frm.set_value('ot_amount',0);\n\t        }\n        }\n\t},\n\twot_hours(frm){\n\t    console.log(\"Hi\");\n\t    if(frm.doc.employee){\n\t        console.log(\"Hi\");\n            var basic = frm.doc.basic; \n\t        var cal = (((basic/30)/8) *1.5)* frm.doc.wot_hours;\n\t        console.log(\"Hi\");\n\t        if(cal){\n\t            console.log(\"Hi\");\n\t        frm.set_value('wot_amount',cal.toFixed(2));\n            }\n            else{\n             frm.set_value('wot_amount',0);\n            }\n        }\n\t},\n\thot_hours(frm){\n\t    console.log(\"Hi\");\n\t    if(frm.doc.employee){\n\t        console.log(\"hi\");\n            var basic = frm.doc.basic;\n\t        var cal = (((basic/30)/8)*2.0) * frm.doc.hot_hours;\n\t        console.log(\"Hi\");\n\t        if(cal){\n\t            console.log(\"Hi\");\n\t        frm.set_value('hot_amount',cal.toFixed(2));\n            }\n            else{\n             frm.set_value('hot_amount',0);\n            }\n        }\n\t},\n\tearned_total(frm){\n\t    console.log(\"Hi\");\n\t    var ma = parseFloat(frm.doc.month_allowance);\n\t    var sal = parseFloat(frm.doc.salary_amount_pay);\n\t    var food = parseFloat(frm.doc.food_allowance);\n\t    var trans = parseFloat(frm.doc.earned_transport_allowance);\n        var mob = parseFloat(frm.doc.earned_mobile_allowance);\n        var hra = parseFloat(frm.doc.earned_hra);\n        var ots = parseFloat(frm.doc.earned_other_allowance);\n        var arr = parseFloat(frm.doc.arrears);\n        var ot = parseFloat(frm.doc.ot_amount);\n        var wot = parseFloat(frm.doc.wot_amount); \n        var hot  = parseFloat(frm.doc.hot_amount);\n        var prod = parseFloat(frm.doc.prodallowance);\n        var md = parseFloat(frm.doc.monthly_deduction);\n        var oi = parseFloat(frm.doc.ot_incentive);\n        var total = ((ma + sal + food + trans + hra + ots + mob + ot + wot + hot + prod + oi + arr) - md);\n        var tot_ot = ot + wot + hot;\n        frm.set_value('overall_ot_amount',tot_ot.toFixed(2));\n        frm.set_value('total_amount',total.toFixed(2));\n\t},\n\tot_incentive(frm){\n\t    console.log(\"Hi\");\n\t    frm.trigger('earned_total');\n\t},\n\tprodallowance(frm){\n\t    console.log(\"Hi\");\n\t    frm.trigger('earned_total');\n\t},\n\tmonth_allowance(frm){\n\t    console.log(\"Hi\");\n\t    frm.trigger('earned_total');\n\t},\n\tmonthly_deduction(frm){\n\t    console.log(\"Hi\");\n\t    frm.trigger('earned_total');\n\t},\n\tarrears(frm){\n\t    console.log(\"Hi\");\n\t    frm.trigger('earned_total');\n\t},\n\trefresh(frm){\n\t    console.log(\"Hi\");\n\t    frm.add_custom_button(__(\"Print\"), function () {\n\t        console.log(\"hi\");\n\t\t\tvar f_name = frm.doc.name;\n\t\t\tvar print_format = \"Leave Salary\";\n\t\t\twindow.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n\t\t\t\t+ \"doctype=\" + encodeURIComponent(\"Leave Salary\")\n\t\t\t\t+ \"&name=\" + encodeURIComponent(f_name)\n\t\t\t\t+ \"&trigger_print=1\"\n\t\t\t\t+ \"&format=\" + print_format\n\t\t\t\t+ \"&no_letterhead=0\"\n\t\t\t));\n        });  \n\t},\n\temployee(frm){\n\t    console.log(\"Hi\");\n\t    if(frm.doc.employee){\n\t        frappe.call({\n    \t        method:\"hrpro_mena.custom.get_leave_application\",\n    \t        args:{\n    \t           'employee':frm.doc.employee,\n    \t           'from_date':frm.doc.leave_start_date\n    \t        },\n    \t        callback(d){\n    \t            if (d.message[11] == 'Annual Leave'){\n        \t            console.log(d.message);\n        \t            frm.set_value('from_date',d.message[0]);\n        \t            frm.set_value('to_date',d.message[1]);\n        \t            frm.set_value('leave_start_date',d.message[2]);\n        \t            frm.set_value('leave_end_date',d.message[3]);\n        \t            frm.set_value('no_of_days_worked',d.message[4]);\n    \t                frm.set_value('ot_hours',d.message[5]);\n        \t            frm.set_value('wot_hours',d.message[6]);\n        \t            frm.set_value('hot_hours',d.message[7]);\n        \t            frm.set_value('lop_days',d.message[8]);\n        \t            frm.set_value('leaves_availed',d.message[9]);\n        \t            frm.set_value('accrued_leaves',d.message[10]);\n        \t            frm.set_value('absent_days',d.message[12] + d.message[13]);\n        \t            console.log(\"sd\",d.message[9]);\n        \t            if (d.message[10] > d.message[9]){\n        \t                frm.set_value('leave_balance',d.message[10] - d.message[9]);\n        \t            }\n        \t            else{\n        \t                frm.set_value('leave_balance',0);\n        \t            }\n        \t            if(frm.doc.leave_balance == 0){\n    \t                    frm.set_df_property(\"leaves_encashed\",\"read_only\",1)\n    \t                }\n    \t                if(frm.doc.leave_balance > 0){\n    \t                    frm.set_df_property(\"leaves_encashed\",\"read_only\",0)\n    \t                }\n        \t            console.log(frm.doc.leave_balance);\n                \t    var a = parseFloat(frm.doc.leaves_availed);\n                \t    var b = parseFloat(frm.doc.leaves_encashed);\n                \t    var c = a + b;\n                \t    frm.set_value('no_of_days',c.toFixed(2));\n    \t            }\n    \t        }\n            });\n\t    }\n\t},\n\tleaves_encashed(frm){\n\t    console.log(\"Hi\");\n\t    var a = parseFloat(frm.doc.leaves_availed);\n\t    var b = parseFloat(frm.doc.leaves_encashed);\n\t    var c = a + b;\n\t    frm.set_value('no_of_days',c.toFixed(2));\n\t    console.log(\"Hi\");\n\t    frm.trigger('total_leave_salary');\n\t},\n\ttotal_leave_salary(frm){\n\t    console.log(\"Hi\");\n\t    var bas = parseFloat(frm.doc.basic);\n\t    var ad = parseFloat(frm.doc.addition);\n\t    var dd = parseFloat(frm.doc.deduction);\n\t    var af = parseFloat(frm.doc.air_fair);\n\t    var te = parseFloat(frm.doc.transport_expense);\n\t    var nod = parseFloat(frm.doc.no_of_days);\n\t    var total = ((((bas/30)*nod)+ (ad + af + te)) - dd);\n        console.log(total);\n        frm.set_value('total_salary',total.toFixed(2));\n\t},\n\taddition(frm){\n\t    console.log(\"Hi\");\n\t    frm.trigger('total_leave_salary');\n\t},\n\tdeduction(frm){\n\t    console.log(\"Hi\");\n\t    frm.trigger('total_leave_salary');\n\t},\n\tair_fair(frm){\n\t    console.log(\"Hi\");\n\t    frm.trigger('total_leave_salary');\n\t},\n\ttransport_expense(frm){\n\t    console.log(\"Hi\");\n\t    frm.trigger('total_leave_salary');\n\t},\n\ttotal_salary(frm){\n\t    console.log(\"Hi\");\n         var s1 = parseFloat(frm.doc.total_amount);\n         var s2 = parseFloat(frm.doc.total_salary);\n         var s = s1 + s2;\n         frm.set_value('total_released_amount',s.toFixed(2));\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Resignation Form",
  "enabled": 1,
  "modified": "2023-04-11 14:36:13.456911",
  "module": "HRPRO MENA",
  "name": "Resignation Form",
  "script": "frappe.ui.form.on('Resignation Form', {\n\trefresh(frm) {\n\t\t  //if(frm.doc.workflow_state ==\"Exit\"){\n\t     frm.add_custom_button(__('F & F Statement'), function() {\n\t        frappe.db.get_value('Full and Final Settlement',{'employee': frm.doc.employee },'name')\n\t    .then(r => {\n        if(r.message && Object.entries(r.message).length === 0){\n            console.log('hello')\n             frappe.route_options = { 'employee':frm.doc.employee,'employee_name': frm.doc.employee_name}\n            frappe.set_route('Form','Full and Final Settlement','new-full-and-final-settlement-1')\n            \n        }\n        else{\n           frappe.set_route('Form','Full and Final Settlement',r.message.name)\n           console.log(\"hiii\")\n        }\n        \n    })\n\t\t\t\n                 });\n\t\t  // }\n\t        if(frm.doc.workflow_state == \"Exit\"){\n    \t\t frm.add_custom_button(__(\"Experience Certificate\"), function () {\n    \t\t\t\n    \t\t\tvar f_name = frm.doc.name\n    \t\t\tvar print_format = \"Experience Certificate\";\n    \t\t\twindow.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n    \t\t\t\t+ \"doctype=\" + encodeURIComponent(\"Resignation Form\")\n    \t\t\t\t+ \"&name=\" + encodeURIComponent(f_name)\n    \t\t\t\t+ \"&trigger_print=1\"\n    \t\t\t\t+ \"&format=\" + print_format\n    \t\t\t\t+ \"&no_letterhead=0\"\n    \t\t\t\t// + \"&letterhead=\" + encodeURIComponent(letter_head)\n    \t\t\t))\n\t\t});   \n\t        }\t\n\t},\n\tvalidate(frm){\n\t    if(frm.doc.employee_name){\n\t        frm.set_value('session_user',frappe.session.user)\n\t       // frm.set_value('date_of_change',new Date())\n      }\n\t            \n\t},\n\tonload(frm){\n\t    if(frm.doc.workflow_state == 'Pending for HOD'){\n\t    frm.set_value('hods_relieving_date',frappe.datetime.get_today())\n\t}\n\tif(frm.doc.workflow_state == 'Pending for HR'){\n\t    frm.set_value('approved_relieving_date',frappe.datetime.get_today())\n\t}\n// \tif(frm.doc.workflow_state == 'Draft'){\n// \t    frm.set_value('relieving_date',frappe.datetime.get_today())\n// \t}\n\t}\n\t\t\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Full and Final Settlement",
  "enabled": 1,
  "modified": "2023-04-11 16:52:43.323924",
  "module": null,
  "name": "Full and Final Settlement",
  "script": "frappe.ui.form.on('Full and Final Settlement', {\r\n    // refresh(frm) {\r\n    //     if (frm.doc.workflow_state == \"Approved\") {\r\n    //         frm.add_custom_button(__(\"Print F & F\"), function () {\r\n\r\n    //             var f_name = frm.doc.name\r\n    //             var print_format = \"Full and Final Settlement\";\r\n    //             window.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\r\n    //                 + \"doctype=\" + encodeURIComponent(\"Full and Final Settlement\")\r\n    //                 + \"&name=\" + encodeURIComponent(f_name)\r\n    //                 + \"&trigger_print=1\"\r\n    //                 + \"&format=\" + print_format\r\n    //                 + \"&no_letterhead=0\"\r\n    //             ))\r\n    //         });\r\n    //     }\r\n    // },\r\n    total_worked(frm){\r\n         if (frm.doc.total_worked) {\r\n            if(frm.doc.grade == 'Office Staff' || frm.doc.grade == 'Factory Staff'){\r\n                var eligible_gratuity = (30 / 365) * frm.doc.total_worked\r\n                frm.set_value('eligible_gratuity', eligible_gratuity.toFixed(2))\r\n            }\r\n            else{\r\n                 var eligible_gratuity = (21 / 365) * frm.doc.total_worked\r\n                frm.set_value('eligible_gratuity', eligible_gratuity.toFixed(2))\r\n            }\r\n         }\r\n    },\r\n    validate(frm) {\r\n        frm.trigger(\"leaves_encashed\")\r\n        var gratuity_amount = (frm.doc.basic_salary / 30) * frm.doc.eligible_gratuity\r\n        frm.set_value('gratuity_amount', Math.round(gratuity_amount))\r\n        if (frm.doc.employee) {\r\n            var basic = frm.doc.basic_salary\r\n            var dow = frm.doc.no_of_days_worked\r\n            var cal = (((basic / dow) / 8) * 1.25) * frm.doc.normal_over_time\r\n            frm.set_value('amount', Math.floor(cal.toFixed(2)))\r\n        }\r\n        if (frm.doc.employee) {\r\n            var ot = frm.doc.amount\r\n            var wot = frm.doc.wot_amount\r\n            var hot = frm.doc.hot_amount\r\n            var cal = ot + wot + hot\r\n            if (cal) {\r\n                frm.set_value('total_ot', cal.toFixed(2))\r\n            }\r\n        }\r\n        if (frm.doc.employee) {\r\n            var leave_pay = (frm.doc.leave_pay)\r\n            var gra_amount = Math.ceil(frm.doc.gratuity_amount)\r\n            var leave_grat = (parseInt(leave_pay) + parseInt(gra_amount)) + (parseInt(frm.doc.additions))- (frm.doc.air_ticket_deduction + frm.doc.loan_other_deduction)\r\n            if (leave_grat) {\r\n                frm.set_value('leave_gratuity_total', leave_grat.toFixed(2))\r\n                var net_pay = leave_grat + frm.doc.total_salary\r\n                frm.set_value('net_pay', net_pay)\r\n            }\r\n        }\r\n        if (frm.doc.employee) {\r\n            var basic = frm.doc.basic_salary\r\n            var dow = frm.doc.no_of_days_worked\r\n            var cal = (((basic / dow) / 8) * 2.0) * frm.doc.holiday_over_time\r\n            if (cal) {\r\n                frm.set_value('hot_amount', cal.toFixed(2))\r\n            }\r\n        }\r\n        if (frm.doc.employee) {\r\n            var basic = frm.doc.basic_salary\r\n            var dow = frm.doc.no_of_days_worked\r\n            var cal = (((basic / dow) / 8) * 1.5) * frm.doc.friday_over_time\r\n            if (cal) {\r\n                frm.set_value('wot_amount', cal.toFixed(2))\r\n            }\r\n        }\r\n        if (frm.doc.employee) {\r\n            var basic = frm.doc.basic_salary\r\n            var dow = frm.doc.total_working_days\r\n            var earned_basic = ((basic / dow) * (frm.doc.no_of_days_worked- frm.doc.absent_days))\r\n            if (earned_basic) {\r\n                frm.set_value('earned_basic', earned_basic.toFixed(2))\r\n            }\r\n            \r\n            var earned_food_allowance = ((frm.doc.food_allowance/dow)*(frm.doc.no_of_days_worked - frm.doc.absent_days))\r\n            if (earned_food_allowance) {\r\n                frm.set_value('earned_food_allowance', earned_food_allowance.toFixed(2))\r\n            }\r\n            var tott = (parseFloat(frm.doc.total_ot) + parseFloat(frm.doc.earned_basic)+ parseFloat(frm.doc.hra_pay )+ parseFloat(frm.doc.month_allowance)+parseFloat(frm.doc.earned_food_allowance)+parseFloat(frm.doc.prodallowance)+parseFloat(frm.doc.arrears))-(parseFloat(frm.doc.monthly_deduction))\r\n            frm.set_value('total_salary',tott)\r\n        }\r\n        if(frm.doc.employee){\r\n            var date1 = new Date(frm.doc.date_of_joining);\r\n            var date2 = new Date(frm.doc.pay_end_date);\r\n            var diffTime = Math.abs(date2 - date1);\r\n            var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); \r\n            frm.set_value('employment_duration',diffDays +1)\r\n            frm.set_value('total_worked',diffDays +1)\r\n    \r\n         }   \r\n        if (frm.doc.employee) {\r\n            var a = frm.doc.basic_salary / 30\r\n            var b = frm.doc.basic_salary / 31\r\n            var x = frm.doc.no_of_days_worked - 31\r\n            var y = (x) * b\r\n            var p = 31\r\n            var q = p * a\r\n            var z = q + y - 2\r\n        }\r\n       \r\n    },\r\n    onload(frm) {\r\n        frm.call('get_reg_form').then(r=>{\r\n\t\t\tif (r.message) {\r\n\t\t\t    console.log(r)\r\n\t\t\t\tfrm.set_value('resignation_form', r.message[0])\r\n                frm.set_value('pay_start_date', r.message[1])\r\n                frm.set_value('pay_end_date', r.message[2])\r\n\t\t\t}\r\n\t\t})\r\n        \r\n        frm.call('calculate_attendance').then(r=>{\r\n\t\t\tif (r.message) {\r\n\t\t\t\tvar start = new Date(frm.doc.pay_start_date);\r\n                    var end = new Date(frm.doc.pay_end_date);\r\n                    var diffDays = end.getDate() - start.getDate()\r\n                    frm.set_value('no_of_days_worked', diffDays + 1)\r\n                    frm.set_value('normal_over_time', r.message[0].ot)\r\n                    frm.set_value('friday_over_time', r.message[0].wot)\r\n                    frm.set_value('holiday_over_time', r.message[0].hot)\r\n\t\t\t}\r\n\t\t})\r\n        frm.call('get_current_month_date').then(r=>{\r\n\t\t\tif (r.message) {\r\n\t\t\t\tfrm.set_value('total_working_days', r.message)\r\n\t\t\t}\r\n\t\t})\r\n            \r\n    },\r\n    \r\n    leaves_encashed(frm) {\r\n        if(frm.doc.leaves_encashed){\r\n            var basic = frm.doc.basic_salary\r\n            var leave = frm.doc.leaves_encashed\r\n            var tw = 30\r\n            console.log(basic)\r\n            console.log(leave)\r\n            console.log(tw)\r\n            var cal = ((basic / tw) * leave)\r\n            frm.set_value('leave_pay', cal.toFixed(2))\r\n        }\r\n        \r\n    }\r\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Staff Skill Mapping Form",
  "enabled": 1,
  "modified": "2023-04-15 17:06:17.371177",
  "module": "HRPRO MENA",
  "name": "Staff Skill Mapping Form",
  "script": "frappe.ui.form.on('Staff Skill Mapping Form', {\n\tvalidate(frm){\n        var total = 0\n        var row = 0\n        $.each(frm.doc.table_14,function(i,d){\n            if(d.rating){\n            total += d.rating\n            row = d.idx\n            }\n        })\n        frm.set_value('total_score',total/row)\n    },\n    onload: function(frm) {\n\t\tif(frm.doc.__islocal){\n\t\t\tfrappe.call({\n\t\t\t\tmethod: \"frappe.client.get_list\",\n\t\t\t\targs: {\n\t\t\t\t\tdoctype: \"Skill Set\",\n\t\t\t\t\torder_by: \"name\",\n\t\t\t\t\tfields: [\"name\"],\n\t\t\t\t},\n\t\t\t\tcallback: function(r) {\n\t\t\t\t\tif(r.message) {\n\t\t\t\t\t\tfrm.clear_table(\"table_14\");\n\t\t\t\t\t\t$.each(r.message,function(i,d){\n\t\t\t\t\t\t\tfrm.add_child(\"table_14\", {\n\t\t\t\t\t\t\t\tskill_sets: d.name,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tfrm.refresh_field('table_14');\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Staff Disciplinary Action Form",
  "enabled": 1,
  "modified": "2023-04-15 17:09:36.087281",
  "module": "HRPRO MENA",
  "name": "Staff Disciplinary Action Form",
  "script": "frappe.ui.form.on('Staff Disciplinary Action Form', {\n\tvalidate(frm){\n\t    frm.trigger(\"future_date_validate\")\n\t},\n\tdate_of_incident(frm){\n\t    frm.trigger(\"future_date_validate\")\n\t},\n\tdate(frm){\n\t    frm.trigger(\"future_date_validate\")\n\t},\n\tfuture_date_validate:function(frm){\n\t\tvar today = new Date()\n\t\tconsole.log(today)\n\t\ttoday.setDate(today.getDate());\n\t\tvar dd = today.getDate();\n        var mm = today.getMonth() + 1; \n        var yyyy = today.getFullYear();\n        if(dd<10) \n            {\n                dd='0'+dd;\n            } \n            \n        if(mm<10) \n            {\n                mm='0'+mm;\n            } \n        today = yyyy+'-'+mm+'-'+dd;\n\t\tif (frm.doc.date_of_incident > today){\n\t\t    frappe.msgprint(\"Future Date not Allowed in date of incident\")\n\t\t    frappe.validated = false;\n\t\t}\n\t\tif (frm.doc.date > today){\n\t\t    frappe.msgprint(\"Future Date not Allowed in  date of evaluation\")\n\t\t    frappe.validated = false;\n\t\t}\n\n\t},\n\t\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Salary and Benefit Form",
  "enabled": 1,
  "modified": "2023-04-15 17:26:57.180472",
  "module": "HRPRO MENA",
  "name": "Salary and Benefit Form",
  "script": "frappe.ui.form.on('Salary and Benefit Form', {\n\temp_id(frm){\n        console.log(frm.doc.emp_id);\n    \n    },\n    basic_salary(frm){\n        frm.trigger('salary_calc')\n    },\n    basic_salary(frm){\n        frm.trigger('salary_calc')\n    },\n    accomodation_allow(frm){\n        frm.trigger('salary_calc')\n    },\n    transport_allow(frm){\n        frm.trigger('salary_calc')\n    },\n    other_allow(frm){\n        var total = frm.doc.basic_salary + frm.doc.accomodation_allow + frm.doc.transport_allow + frm.doc.other_allow\n        frm.set_value('total_new',total)\n    },\n    \n\t validate(frm){\n\t    frm.trigger(\"add_salary\")\n        var total = 0\n        $.each(frm.doc.appraisal_rating,function(i,d){\n            if(d.rating){\n            total += d.rating\n            }\n        })\n        console.log(total)\n        frm.set_value('total_score',total)\n\t },\n\n\t other_allowances(frm){\n\t\t    if(frm.doc.basic_salary){\n\t    var balance = frm.doc.basic_salary - frm.doc.Other_allowances\n\t    console(balance)\n\t    frm.set_value(\"balance\",balance);\n\t\t    }\n\t \n},\n});\n\nfrappe.ui.form.on('Current Salary Table', {\n\tother_allowances(frm,cdt,cdn) {\n\t\tvar child = locals[cdt][cdn]\n\t    if(child.basic_salary && child.other_allowances){\n\t    var total = parseInt(child.basic_salary) + parseInt(child.other_allowances)\n\t    child.total_salary = total\n\t    frappe.model.set_value(cdt,cdn,\"total_salary\",total)\n\t}\n\tfrm.refresh_field('current_salary_table')\n\t}\n})\n\nfrappe.ui.form.on('Revised Salary Table', {\n    other_allowances(frm,cdt,cdn) {\n\t\tvar child = locals[cdt][cdn]\n\t    if(child.basic_salary && child.other_allowances){\n\t    var total = parseInt(child.basic_salary) + parseInt(child.other_allowances)\n\t    child.total_salary = total\n\t    frappe.model.set_value(cdt,cdn,\"total_salary\",total)\n\t  \t}\n\tfrm.refresh_field('revised_salary_table')\n\t},\n\t\n    \n\t\n    \n\t\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Salary Request",
  "enabled": 1,
  "modified": "2023-04-17 10:19:51.540723",
  "module": null,
  "name": "Leave Salary Request",
  "script": "frappe.ui.form.on('Leave Salary Request', {\n\tleave_end_date:function(frm){\n        if(frm.doc.leave_start_date && frm.doc.leave_end_date){      \n            var start = frappe.datetime.obj_to_str(frm.doc.leave_start_date);\n            var end = frappe.datetime.obj_to_str(frm.doc.leave_end_date);\n            var difference = frappe.datetime.get_day_diff(end,start);\n            if(difference >=0){\n                frm.set_value(\"leave_days\",difference + 1);\n            }\n            else{\n                frm.set_value(\"leave_days\",0);\n            }\n        }\n    },\n    leave_start_date(frm){\n        frm.trigger(\"leave_end_date\")\n    }\n})",
  "view": "Form"
 }
]